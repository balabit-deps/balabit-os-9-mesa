From 3a2c670b009044e4554d577d5a21528b971e9bcf Mon Sep 17 00:00:00 2001
From: Francisco Jerez <currojerez@riseup.net>
Date: Tue, 26 Oct 2021 17:18:58 -0700
Subject: [PATCH 25/25] intel/dev: Compute pixel pipe information based on
 geometry topology DRM query.

This changes the intel_device_info calculation to call an additional
DRM query requesting the geometry topology from the kernel, which may
differ from the result of the current topology query on XeHP+
platforms with compute-only and 3D-only DSSes.  This seems more
reliable than the current guesswork done in intel_device_info.c trying
to figure out which DSSes are available for the render CS.

XXX - This depends on an i915 interface which hasn't been upstreamed yet.
---
 src/intel/dev/intel_device_info.c | 81 +++++++++++++++++++++++++------
 1 file changed, 67 insertions(+), 14 deletions(-)

diff --git a/src/intel/dev/intel_device_info.c b/src/intel/dev/intel_device_info.c
index c729ae83294..fe674b4aa1a 100644
--- a/src/intel/dev/intel_device_info.c
+++ b/src/intel/dev/intel_device_info.c
@@ -40,6 +40,11 @@
 
 #include "drm-uapi/i915_drm.h"
 
+/* XXX - Update DRM headers to latest version when this API is available. */
+#ifndef DRM_I915_QUERY_GEOMETRY_SUBSLICES
+#define DRM_I915_QUERY_GEOMETRY_SUBSLICES  ((1 << 16) | 7)
+#endif
+
 static const struct {
    const char *name;
    int pci_id;
@@ -1111,7 +1116,7 @@ update_slice_subslice_counts(struct intel_device_info *devinfo)
 }
 
 static void
-update_pixel_pipes(struct intel_device_info *devinfo)
+update_pixel_pipes(struct intel_device_info *devinfo, uint8_t *subslice_masks)
 {
    if (devinfo->ver < 11)
       return;
@@ -1140,13 +1145,24 @@ update_pixel_pipes(struct intel_device_info *devinfo)
 
       if (subslice_idx < ARRAY_SIZE(devinfo->subslice_masks))
          devinfo->ppipe_subslices[p] =
-            __builtin_popcount(devinfo->subslice_masks[subslice_idx] & ppipe_mask);
+            __builtin_popcount(subslice_masks[subslice_idx] & ppipe_mask);
       else
          devinfo->ppipe_subslices[p] = 0;
    }
+}
+
+static void
+guess_pixel_pipes(struct intel_device_info *devinfo)
+{
+   /* The geometry subslice topology is not available from the kernel,
+    * use the generic topology instead, then try to make an educated
+    * guess about which DSSes are actually available to the 3D engine.
+    */
+   update_pixel_pipes(devinfo, devinfo->subslice_masks);
 
-   /* From the "Fusing information" BSpec page regarding DG2 configurations
-    * where at least a slice has a single pixel pipe fused off:
+   /* From the "Fusing information" BSpec page regarding DG2-G10
+    * configurations where at least a slice has a single pixel pipe
+    * fused off:
     *
     * "Fault disable any 2 DSS in a Gslice and disable that Gslice (incl.
     *  geom/color/Z)"
@@ -1154,7 +1170,7 @@ update_pixel_pipes(struct intel_device_info *devinfo)
     * XXX - Query geometry topology from hardware once kernel interface is
     *       available instead of trying to do guesswork here.
     */
-   if (intel_device_info_is_dg2(devinfo)) {
+   if (devinfo->platform == INTEL_PLATFORM_DG2_G10) {
       for (unsigned p = 0; p < INTEL_DEVICE_MAX_PIXEL_PIPES; p++) {
          if (devinfo->ppipe_subslices[p] < 2 ||
              devinfo->ppipe_subslices[p ^ 1] < 2)
@@ -1202,8 +1218,16 @@ update_l3_banks(struct intel_device_info *devinfo)
  */
 static void
 update_from_single_slice_topology(struct intel_device_info *devinfo,
-                                  const struct drm_i915_query_topology_info *topology)
+                                  const struct drm_i915_query_topology_info *topology,
+                                  const struct drm_i915_query_topology_info *geom_topology)
 {
+   /* An array of bit masks of the subslices available for 3D
+    * workloads, analogous to intel_device_info::subslice_masks.  This
+    * may differ from the set of enabled subslices on XeHP+ platforms
+    * with compute-only subslices.
+    */
+   uint8_t geom_subslice_masks[ARRAY_SIZE(devinfo->subslice_masks)] = { 0 };
+
    assert(devinfo->verx10 >= 125);
 
    reset_masks(devinfo);
@@ -1222,16 +1246,29 @@ update_from_single_slice_topology(struct intel_device_info *devinfo,
    devinfo->eu_subslice_stride = DIV_ROUND_UP(16, 8);
 
    for (uint32_t ss_idx = 0; ss_idx < topology->max_subslices; ss_idx++) {
+      const uint32_t s = ss_idx / 4;
+      const uint32_t ss = ss_idx % 4;
+
+      /* Determine whether ss_idx is enabled (ss_idx_available) and
+       * available for 3D workloads (geom_ss_idx_available), which may
+       * differ on XeHP+ if ss_idx is a compute-only DSS.
+       */
       const bool ss_idx_available =
          (topology->data[topology->subslice_offset + ss_idx / 8] >>
           (ss_idx % 8)) & 1;
+      const bool geom_ss_idx_available =
+         (geom_topology->data[geom_topology->subslice_offset + ss_idx / 8] >>
+          (ss_idx % 8)) & 1;
+
+      if (geom_ss_idx_available) {
+         assert(ss_idx_available);
+         geom_subslice_masks[s * devinfo->subslice_slice_stride +
+                             ss / 8] |= 1u << (ss % 8);
+      }
 
       if (!ss_idx_available)
          continue;
 
-      uint32_t s = ss_idx / 4;
-      uint32_t ss = ss_idx % 4;
-
       devinfo->max_slices = MAX2(devinfo->max_slices, s + 1);
       devinfo->slice_masks |= 1u << s;
 
@@ -1254,8 +1291,12 @@ update_from_single_slice_topology(struct intel_device_info *devinfo,
    }
 
    update_slice_subslice_counts(devinfo);
-   update_pixel_pipes(devinfo);
    update_l3_banks(devinfo);
+
+   if (topology != geom_topology)
+      update_pixel_pipes(devinfo, geom_subslice_masks);
+   else
+      guess_pixel_pipes(devinfo);
 }
 
 static void
@@ -1292,7 +1333,7 @@ update_from_topology(struct intel_device_info *devinfo,
 
    /* Now that all the masks are in place, update the counts. */
    update_slice_subslice_counts(devinfo);
-   update_pixel_pipes(devinfo);
+   update_pixel_pipes(devinfo, devinfo->subslice_masks);
    update_l3_banks(devinfo);
 }
 
@@ -1550,10 +1591,22 @@ query_topology(struct intel_device_info *devinfo, int fd)
    if (topo_info == NULL)
       return false;
 
-   if (devinfo->verx10 >= 125)
-      update_from_single_slice_topology(devinfo, topo_info);
-   else
+   if (devinfo->verx10 >= 125) {
+      struct drm_i915_query_topology_info *geom_topo_info =
+         intel_i915_query_alloc(fd, DRM_I915_QUERY_GEOMETRY_SUBSLICES, NULL);
+
+      if (geom_topo_info) {
+         update_from_single_slice_topology(devinfo, topo_info, geom_topo_info);
+         free(geom_topo_info);
+      } else {
+         mesa_logw("Kernel lacks support for DRM_I915_QUERY_GEOMETRY_SUBSLICES, "
+                   "falling back to broken userspace workaround.");
+         update_from_single_slice_topology(devinfo, topo_info, topo_info);
+      }
+
+   } else {
       update_from_topology(devinfo, topo_info);
+   }
 
    free(topo_info);
 
-- 
2.34.1

