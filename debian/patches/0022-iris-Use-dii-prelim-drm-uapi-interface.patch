From 5166f78612310fe994b06624470823be448ddd17 Mon Sep 17 00:00:00 2001
From: Jordan Justen <jordan.l.justen@intel.com>
Date: Mon, 28 Jun 2021 01:29:06 -0700
Subject: [PATCH 22/25] iris: Use dii prelim drm-uapi interface

 * Merge Jason's "iris: Gracefully fall back from DII to upstream"
 * Merge Ken's "iris: Fallback for DII which doesn't support
   I915_MMAP_OFFSET_FIXED"

Signed-off-by: Jordan Justen <jordan.l.justen@intel.com>
---
 src/gallium/drivers/iris/iris_bufmgr.c | 105 ++++++++++++++++++++-----
 1 file changed, 87 insertions(+), 18 deletions(-)

--- a/src/gallium/drivers/iris/iris_bufmgr.c
+++ b/src/gallium/drivers/iris/iris_bufmgr.c
@@ -67,6 +67,7 @@
 #include "string.h"
 
 #include "drm-uapi/i915_drm.h"
+#include "drm-uapi/i915_drm_prelim.h"
 
 #ifdef HAVE_VALGRIND
 #include <valgrind.h>
@@ -234,6 +235,7 @@ struct iris_bufmgr {
    bool has_tiling_uapi:1;
    bool has_userptr_probe:1;
    bool bo_reuse:1;
+   bool prelim_drm:1;
 
    struct intel_aux_map_context *aux_map_ctx;
 
@@ -979,26 +981,53 @@ alloc_fresh_bo(struct iris_bufmgr *bufmg
          unreachable("invalid heap for BO");
       }
 
-      struct drm_i915_gem_create_ext_memory_regions ext_regions = {
-         .base = { .name = I915_GEM_CREATE_EXT_MEMORY_REGIONS },
-         .num_regions = nregions,
-         .regions = (uintptr_t)regions,
-      };
+      if (bufmgr->prelim_drm) {
+         struct prelim_drm_i915_gem_object_param region_param = {
+            .size = nregions,
+            .data = (uintptr_t)regions,
+            .param = PRELIM_I915_OBJECT_PARAM | PRELIM_I915_PARAM_MEMORY_REGIONS,
+         };
+
+         struct prelim_drm_i915_gem_create_ext_setparam setparam_region = {
+            .base = { .name = PRELIM_I915_GEM_CREATE_EXT_SETPARAM },
+            .param = region_param,
+         };
+
+         struct prelim_drm_i915_gem_create_ext create = {
+            .size = bo_size,
+            .extensions = (uintptr_t)&setparam_region,
+         };
+
+         if (intel_ioctl(bufmgr->fd, PRELIM_DRM_IOCTL_I915_GEM_CREATE_EXT,
+                         &create) != 0) {
+            free(bo);
+            return NULL;
+         }
 
-      struct drm_i915_gem_create_ext create = {
-         .size = bo_size,
-         .extensions = (uintptr_t)&ext_regions,
-      };
+         bo->gem_handle = create.handle;
+      } else {
+         /* It should be safe to use GEM_CREATE_EXT without checking, since we
+          * are in the side of the branch where discrete memory is available.
+          * So we can assume GEM_CREATE_EXT is supported already.
+          */
+         struct drm_i915_gem_create_ext_memory_regions ext_regions = {
+            .base = { .name = I915_GEM_CREATE_EXT_MEMORY_REGIONS },
+            .num_regions = nregions,
+            .regions = (uintptr_t)regions,
+         };
+
+         struct drm_i915_gem_create_ext create = {
+            .size = bo_size,
+            .extensions = (uintptr_t)&ext_regions,
+         };
 
-      /* It should be safe to use GEM_CREATE_EXT without checking, since we are
-       * in the side of the branch where discrete memory is available. So we
-       * can assume GEM_CREATE_EXT is supported already.
-       */
-      if (intel_ioctl(bufmgr->fd, DRM_IOCTL_I915_GEM_CREATE_EXT, &create) != 0) {
-         free(bo);
-         return NULL;
+         if (intel_ioctl(bufmgr->fd, DRM_IOCTL_I915_GEM_CREATE_EXT, &create) != 0) {
+            free(bo);
+            return NULL;
+         }
+
+         bo->gem_handle = create.handle;
       }
-      bo->gem_handle = create.handle;
    } else {
       struct drm_i915_gem_create create = { .size = bo_size };
 
@@ -1587,6 +1616,13 @@ iris_bo_gem_mmap_offset(struct pipe_debu
 
    /* Get the fake offset back */
    int ret = intel_ioctl(bufmgr->fd, DRM_IOCTL_I915_GEM_MMAP_OFFSET, &mmap_arg);
+   if (ret != 0 && mmap_arg.flags == I915_MMAP_OFFSET_FIXED) {
+      mmap_arg.flags =
+         bo->real.heap != IRIS_HEAP_SYSTEM_MEMORY ?
+         I915_MMAP_OFFSET_WC : I915_MMAP_OFFSET_WB;
+      ret = intel_ioctl(bufmgr->fd, DRM_IOCTL_I915_GEM_MMAP_OFFSET, &mmap_arg);
+   }
+
    if (ret != 0) {
       DBG("%s:%d: Error preparing buffer %d (%s): %s .\n",
           __FILE__, __LINE__, bo->gem_handle, bo->name, strerror(errno));
@@ -2302,8 +2338,42 @@ gem_param(int fd, int name)
 }
 
 static bool
+iris_bufmgr_query_meminfo_prelim(struct iris_bufmgr *bufmgr)
+{
+   struct prelim_drm_i915_query_memory_regions *meminfo =
+      intel_i915_query_alloc(bufmgr->fd, PRELIM_DRM_I915_QUERY_MEMORY_REGIONS,
+                             NULL);
+   if (meminfo == NULL)
+      return false;
+
+   for (int i = 0; i < meminfo->num_regions; i++) {
+      const struct prelim_drm_i915_memory_region_info *mem = &meminfo->regions[i];
+      switch (mem->region.memory_class) {
+      case I915_MEMORY_CLASS_SYSTEM:
+         bufmgr->sys.region = mem->region;
+         bufmgr->sys.size = mem->probed_size;
+         break;
+      case I915_MEMORY_CLASS_DEVICE:
+         bufmgr->vram.region = mem->region;
+         bufmgr->vram.size = mem->probed_size;
+         break;
+      default:
+         break;
+      }
+   }
+
+   bufmgr->prelim_drm = true;
+
+   free(meminfo);
+   return true;
+}
+
+static bool
 iris_bufmgr_query_meminfo(struct iris_bufmgr *bufmgr)
 {
+   if (iris_bufmgr_query_meminfo_prelim(bufmgr))
+      return true;
+
    struct drm_i915_query_memory_regions *meminfo =
       intel_i915_query_alloc(bufmgr->fd, DRM_I915_QUERY_MEMORY_REGIONS, NULL);
    if (meminfo == NULL)
@@ -2326,7 +2396,6 @@ iris_bufmgr_query_meminfo(struct iris_bu
    }
 
    free(meminfo);
-
    return true;
 }
 
