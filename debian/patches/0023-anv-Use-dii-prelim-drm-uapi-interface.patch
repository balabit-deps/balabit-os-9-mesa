From 950e062aa723e45e1ffb23586220874ede95477e Mon Sep 17 00:00:00 2001
From: Jordan Justen <jordan.l.justen@intel.com>
Date: Mon, 28 Jun 2021 01:29:06 -0700
Subject: [PATCH 23/25] anv: Use dii prelim drm-uapi interface
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

 * Merge Jason's "anv: Gracefully fall back from DII to upstream"
   With reworks:
   * Iv√°n: Fixed missing prelim path in anv_update_meminfo
   * Lionel: Fix size of sys_mem_regions in anv_gather_meminfo_prelim
 * Merge Ken's "anv: Fallback for DII which doesn't support
   I915_MMAP_OFFSET_FIXED"

Signed-off-by: Jordan Justen <jordan.l.justen@intel.com>
---
 src/intel/common/intel_gem.h   |  1 +
 src/intel/vulkan/anv_device.c  | 85 +++++++++++++++++++++++++++++++++-
 src/intel/vulkan/anv_gem.c     | 44 ++++++++++++++++++
 src/intel/vulkan/anv_private.h |  2 +
 4 files changed, 130 insertions(+), 2 deletions(-)

diff --git a/src/intel/common/intel_gem.h b/src/intel/common/intel_gem.h
index 0f908797feb..f3ee7849bce 100644
--- a/src/intel/common/intel_gem.h
+++ b/src/intel/common/intel_gem.h
@@ -25,6 +25,7 @@
 #define INTEL_GEM_H
 
 #include "drm-uapi/i915_drm.h"
+#include "drm-uapi/i915_drm_prelim.h"
 
 #include <assert.h>
 #include <errno.h>
diff --git a/src/intel/vulkan/anv_device.c b/src/intel/vulkan/anv_device.c
index d8a43e22107..e0bf0425daa 100644
--- a/src/intel/vulkan/anv_device.c
+++ b/src/intel/vulkan/anv_device.c
@@ -354,6 +354,79 @@ anv_compute_sys_heap_size(struct anv_physical_device *device,
    return available_ram;
 }
 
+static VkResult MUST_CHECK
+anv_gather_meminfo_prelim(struct anv_physical_device *device, int fd, bool update)
+{
+   char sys_mem_regions[sizeof(struct prelim_drm_i915_query_memory_regions) +
+	                sizeof(struct prelim_drm_i915_memory_region_info)];
+
+   struct prelim_drm_i915_query_memory_regions *mem_regions =
+      intel_i915_query_alloc(fd, PRELIM_DRM_I915_QUERY_MEMORY_REGIONS, NULL);
+   if (mem_regions == NULL) {
+      if (device->info.has_local_mem) {
+         return VK_ERROR_INCOMPATIBLE_DRIVER;
+      }
+
+      uint64_t total_phys;
+      if (!os_get_total_physical_memory(&total_phys)) {
+         return VK_ERROR_INITIALIZATION_FAILED;
+      }
+
+      uint64_t available;
+      if (!os_get_available_system_memory(&available))
+         available = 0; /* Silently disable VK_EXT_memory_budget */
+
+      /* The kernel query failed.  Fake it using OS memory queries.  This
+       * should be roughly the same for integrated GPUs.
+       */
+      mem_regions = (void *)sys_mem_regions;
+      mem_regions->num_regions = 1;
+      mem_regions->regions[0] = (struct prelim_drm_i915_memory_region_info) {
+         .region.memory_class = I915_MEMORY_CLASS_SYSTEM,
+         .probed_size = total_phys,
+         .unallocated_size = available,
+      };
+   }
+
+   for(int i = 0; i < mem_regions->num_regions; i++) {
+      struct prelim_drm_i915_memory_region_info *info = &mem_regions->regions[i];
+
+      struct anv_memregion *region;
+      switch (info->region.memory_class) {
+      case I915_MEMORY_CLASS_SYSTEM:
+         region = &device->sys;
+         break;
+      case I915_MEMORY_CLASS_DEVICE:
+         region = &device->vram;
+         break;
+      default:
+         /* We don't know what kind of memory this is */
+         continue;
+      }
+
+      uint64_t size = info->probed_size;
+      if (info->region.memory_class == I915_MEMORY_CLASS_SYSTEM)
+         size = anv_compute_sys_heap_size(device, size);
+
+      uint64_t available = MIN2(size, info->unallocated_size);
+
+      if (update) {
+         assert(region->region.memory_class == info->region.memory_class);
+         assert(region->region.memory_instance == info->region.memory_instance);
+         assert(region->size == size);
+      } else {
+         region->region = info->region;
+         region->size = size;
+      }
+      region->available = available;
+   }
+
+   if (mem_regions != (void *)sys_mem_regions)
+      free(mem_regions);
+
+   return VK_SUCCESS;
+}
+
 static VkResult MUST_CHECK
 anv_gather_meminfo(struct anv_physical_device *device, int fd, bool update)
 {
@@ -365,13 +438,13 @@ anv_gather_meminfo(struct anv_physical_device *device, int fd, bool update)
    if (mem_regions == NULL) {
       if (device->info.has_local_mem) {
          return vk_errorf(device, VK_ERROR_INCOMPATIBLE_DRIVER,
-                          "failed to memory regions: %m");
+                           "failed to memory regions: %m");
       }
 
       uint64_t total_phys;
       if (!os_get_total_physical_memory(&total_phys)) {
          return vk_errorf(device, VK_ERROR_INITIALIZATION_FAILED,
-                          "failed to get total physical memory: %m");
+                           "failed to get total physical memory: %m");
       }
 
       uint64_t available;
@@ -432,12 +505,20 @@ anv_gather_meminfo(struct anv_physical_device *device, int fd, bool update)
 static VkResult MUST_CHECK
 anv_init_meminfo(struct anv_physical_device *device, int fd)
 {
+   if (anv_gather_meminfo_prelim(device, fd, false) == VK_SUCCESS) {
+      device->prelim_drm = true;
+      return VK_SUCCESS;
+   }
+
+   device->prelim_drm = false;
    return anv_gather_meminfo(device, fd, false);
 }
 
 static void
 anv_update_meminfo(struct anv_physical_device *device, int fd)
 {
+   if (anv_gather_meminfo_prelim(device, fd, true) == VK_SUCCESS)
+      return;
    ASSERTED VkResult result = anv_gather_meminfo(device, fd, true);
    assert(result == VK_SUCCESS);
 }
diff --git a/src/intel/vulkan/anv_gem.c b/src/intel/vulkan/anv_gem.c
index 852b94cb957..aee16e945da 100644
--- a/src/intel/vulkan/anv_gem.c
+++ b/src/intel/vulkan/anv_gem.c
@@ -64,11 +64,49 @@ anv_gem_close(struct anv_device *device, uint32_t gem_handle)
    intel_ioctl(device->fd, DRM_IOCTL_GEM_CLOSE, &close);
 }
 
+static uint32_t
+anv_gem_create_regions_prelim(struct anv_device *device, uint64_t anv_bo_size,
+                              uint32_t num_regions,
+                              struct drm_i915_gem_memory_class_instance *regions)
+{
+   struct prelim_drm_i915_gem_object_param obj_param = {
+      .param = PRELIM_I915_PARAM_MEMORY_REGIONS | PRELIM_I915_OBJECT_PARAM,
+      .size = num_regions,
+      .data = (uintptr_t)regions,
+   };
+
+   struct prelim_drm_i915_gem_create_ext_setparam setparam_ext = {
+      .base = { .name = PRELIM_I915_GEM_CREATE_EXT_SETPARAM },
+      .param = obj_param,
+   };
+
+   struct prelim_drm_i915_gem_create_ext gem_create = {
+      .size = anv_bo_size,
+      .extensions = (uintptr_t) &setparam_ext,
+   };
+
+   int ret = intel_ioctl(device->fd, PRELIM_DRM_IOCTL_I915_GEM_CREATE_EXT,
+                         &gem_create);
+   if (ret != 0) {
+      return 0;
+   }
+
+   return gem_create.handle;
+}
+
 uint32_t
 anv_gem_create_regions(struct anv_device *device, uint64_t anv_bo_size,
                        uint32_t num_regions,
                        struct drm_i915_gem_memory_class_instance *regions)
 {
+   if (device->physical->prelim_drm) {
+      uint32_t bo_prelim = anv_gem_create_regions_prelim(device, anv_bo_size,
+                                                         num_regions, regions);
+      assert(bo_prelim);
+      if (bo_prelim)
+         return bo_prelim;
+   }
+
    struct drm_i915_gem_create_ext_memory_regions ext_regions = {
       .base = { .name = I915_GEM_CREATE_EXT_MEMORY_REGIONS },
       .num_regions = num_regions,
@@ -105,6 +143,12 @@ anv_gem_mmap_offset(struct anv_device *device, uint32_t gem_handle,
 
    /* Get the fake offset back */
    int ret = intel_ioctl(device->fd, DRM_IOCTL_I915_GEM_MMAP_OFFSET, &gem_mmap);
+   if (ret != 0 && gem_mmap.flags == I915_MMAP_OFFSET_FIXED) {
+      gem_mmap.flags =
+         (flags & I915_MMAP_WC) ? I915_MMAP_OFFSET_WC : I915_MMAP_OFFSET_WB,
+      ret = intel_ioctl(device->fd, DRM_IOCTL_I915_GEM_MMAP_OFFSET, &gem_mmap);
+   }
+
    if (ret != 0)
       return MAP_FAILED;
 
diff --git a/src/intel/vulkan/anv_private.h b/src/intel/vulkan/anv_private.h
index b8e16d17199..eb47e2e4feb 100644
--- a/src/intel/vulkan/anv_private.h
+++ b/src/intel/vulkan/anv_private.h
@@ -992,6 +992,8 @@ struct anv_physical_device {
 
     bool                                        always_flush_cache;
 
+    bool                                        prelim_drm;
+
     struct {
       uint32_t                                  family_count;
       struct anv_queue_family                   families[ANV_MAX_QUEUE_FAMILIES];
-- 
2.34.1

